name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  devsecops-demo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/app
          pytest app/test.py --cov=app --cov-report=xml:coverage.xml --maxfail=1 -v

      - name: Install Docker (latest version)
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          docker --version

      - name: Start Docker Service
        run: sudo service docker start

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t sidwar/devsecops-demo:${{ github.sha }} .

      - name: Push Docker Image to Docker Hub
        run: docker push sidwar/devsecops-demo:${{ github.sha }}

  check_for_secrets:
    runs-on: ubuntu-latest
    needs: devsecops-demo

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v1
        with:
          config: .gitleaks.toml 
          fail_on_commit: true   

  sonar_scan:
    runs-on: ubuntu-latest
    needs: devsecops-demo

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List directory contents
        run: ls -la

      - name: Run SonarCloud analysis
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.python.coverage.reportPaths=coverage.xml 
            -Dsonar.sources=app
            -X
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  validate_dockerfile:
    runs-on: ubuntu-latest
    needs: devsecops-demo

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Validate Dockerfile
        run: |
          mkdir -p policy
          echo '
          package docker.policy

          deny[msg] {
              input.instruction == "USER"
              input.value == "root"
              msg = "Avoid using root user in Dockerfile."
          }

          deny[msg] {
              input.instruction == "ADD"
              msg = "Use COPY instead of ADD for better security."
          }

          any_non_root_user_set {
              input.instruction == "USER"
              input.value != "root"
          }
          ' > policy/docker.rego

          opa eval --input Dockerfile --data policy/ --format pretty \
            "data.docker.policy.deny" > policy-evaluation.txt || true
          cat policy-evaluation.txt

  vulnerability_scan:
    runs-on: ubuntu-latest
    needs: validate_dockerfile

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker Image
        run: docker pull sidwar/devsecops-demo:${{ github.sha }}

      - name: Run Trivy Scan on Docker Image
        run: |
          chmod -R 777 $(pwd) # Ensure directory write permissions
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd)/trivy-cache:/root/.cache/ \
            -v $(pwd):/app \
            aquasec/trivy:latest image \
            --scanners vuln \
            --format json \
            --output /app/trivy-report.json \
            sidwar/devsecops-demo:${{ github.sha }}
          
          if [ ! -f trivy-report.json ]; then
            echo "Trivy report not generated. Debugging output:"
            docker images
            ls -la
            exit 1
          fi

      - name: Upload Trivy Vulnerability Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-vulnerability-report
          path: trivy-report.json


  optimize_image:
    runs-on: ubuntu-latest
    needs: validate_dockerfile
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker Image
        run: docker pull sidwar/devsecops-demo:${{ github.sha }}

      - name: Pull Slim Docker Image
        run: docker pull dslim/slim:latest

      - name: Optimize Docker Image using Slim
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/tmp \
            dslim/slim:latest \
            build --http-probe=false sidwar/devsecops-demo:${{ github.sha }} --output sidwar/devsecops-demo:slim-${{ github.sha }}

  sign_and_verify_image:
    runs-on: ubuntu-latest
    needs: optimize_image
    steps:
      - name: Install Cosign
        run: |
          curl -L https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker Image
        run: docker pull sidwar/devsecops-demo:${{ github.sha }}

      - name: Extract Image Digest
        id: extract_image_digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' sidwar/devsecops-demo:${{ github.sha }})
          echo "IMAGE_DIGEST=$DIGEST" >> $GITHUB_ENV

      - name: Sign Docker Image
        run: |
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key
          cosign sign --key cosign.key --yes $IMAGE_DIGEST
        env:
          IMAGE_DIGEST: ${{ env.IMAGE_DIGEST }}

      - name: Print Signed Image Digest
        run: |
          echo "Signed image digest: $IMAGE_DIGEST"

      - name: Verify Signed Docker Image using Digest
        run: |
          echo "${{ secrets.COSIGN_PUB }}" > cosign.pub
          cosign verify --key cosign.pub $IMAGE_DIGEST
        env:
          COSIGN_PUB: ${{ secrets.COSIGN_PUB }}
          IMAGE_DIGEST: ${{ env.IMAGE_DIGEST }}

      - name: Cleanup
        run: rm -f cosign.key cosign.pub
