# name: DevSecOps Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   devsecops-demo:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout Code
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       # Step 2: Set Up Python
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: 3.8

#       # Step 3: Install Dependencies
#       - name: Install Dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       # Step 4: Run SonarCloud Analysis (Code Quality + SAST)
#       - name: SonarCloud Scan
#         uses: sonarsource/sonarcloud-github-action@v2
#         with:
#           args: >
#             -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
#             -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
#             -Dsonar.host.url=https://sonarcloud.io
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#       # Step 5: Build Docker Image
#       - name: Build Docker Image
#         run: docker build -t devsecops-demo:latest .

#       # Step 6: Install OPA
#       - name: Install OPA
#         run: |
#           curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
#           chmod +x opa
#           sudo mv opa /usr/local/bin/

#       # Step 7: Validate Dockerfile with OPA (Best Practices)
#       - name: Validate Dockerfile
#         run: |
#           opa eval --input Dockerfile --data policy/ --format pretty \
#             "data.docker.policy.deny" > policy-evaluation.txt

#       # Step 8: Scan Docker Image with Trivy (Vulnerability Scan)
#       - name: Scan Docker Image with Trivy
#         run: docker run --rm aquasec/trivy image devsecops-demo:latest

#       # Step 9: Optimize Docker Image with Docker Slim
#       - name: Optimize Docker Image
#         run: docker-slim build --tag devsecops-demo-optimized:latest devsecops-demo:latest

#       # Step 10: Sign Optimized Docker Image with Cosign
#       - name: Sign Docker Image
#         env:
#           COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
#         run: |
#           echo "$COSIGN_KEY" > cosign.key
#           cosign sign --key cosign.key devsecops-demo-optimized:latest

#       # Step 11: Push Signed Docker Image to Container Registry
#       - name: Push Docker Image
#         run: docker tag devsecops-demo-optimized:latest <your-docker-repo>/devsecops-demo:latest && \
#              docker push <your-docker-repo>/devsecops-demo:latest

#       # Step 12: Verify Signed Docker Image (Final Validation)
#       - name: Verify Signed Docker Image
#         env:
#           COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
#         run: |
#           echo "$COSIGN_KEY" > cosign.key
#           cosign verify --key cosign.key <your-docker-repo>/devsecops-demo:latest

name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  devsecops-demo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/app
          pytest app/test.py --cov=app --cov-report=xml:coverage.xml --maxfail=1 -v

      - name: Install Docker (latest version)
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          docker --version

      - name: Start Docker Service
        run: sudo service docker start

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t sidwar/devsecops-demo:${{ github.sha }} .

      - name: Push Docker Image to Docker Hub
        run: docker push sidwar/devsecops-demo:${{ github.sha }}

  sonar_scan:
    runs-on: ubuntu-latest
    needs: devsecops-demo

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List directory contents
        run: ls -la

      - name: Run SonarCloud analysis
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.python.coverage.reportPaths=coverage.xml 
            -Dsonar.sources=app
            -X
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  validate_dockerfile:
    runs-on: ubuntu-latest
    needs: devsecops-demo

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Validate Dockerfile
        run: |
          mkdir -p policy
          echo '
          package docker.policy

          deny[msg] {
              input.instruction == "USER"
              input.value == "root"
              msg = "Avoid using root user in Dockerfile."
          }

          deny[msg] {
              input.instruction == "ADD"
              msg = "Use COPY instead of ADD for better security."
          }

          any_non_root_user_set {
              input.instruction == "USER"
              input.value != "root"
          }
          ' > policy/docker.rego

          opa eval --input Dockerfile --data policy/ --format pretty \
            "data.docker.policy.deny" > policy-evaluation.txt || true
          cat policy-evaluation.txt

  vulnerability_scan:
    runs-on: ubuntu-latest
    needs: validate_dockerfile

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Scan Docker Image with Trivy and Save Report
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd)/trivy-cache:/root/.cache/ \
            aquasec/trivy image --scanners vuln \
            --format json \
            --output trivy-report.json \
            sidwar/devsecops-demo:${{ github.sha }}

      - name: Upload Trivy Vulnerability Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-vulnerability-report
          path: trivy-report.json

  optimize_image:
    runs-on: ubuntu-latest
    needs: vulnerability_scan
    continue-on-error: true

    steps:
      - name: Pull Docker Image
        run: docker pull sidwar/devsecops-demo:${{ github.sha }}

      - name: Optimize Docker Image with Docker Slim
        uses: docker-slim/docker-slim-action@v5
        with:
          target: sidwar/devsecops-demo:${{ github.sha }}
          tag: sidwar/devsecops-demo:slim-${{ github.sha }}
        continue-on-error: false

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Slimmed Docker Image
        run: docker push sidwar/devsecops-demo:slim-${{ github.sha }}

  sign_image:
    runs-on: ubuntu-latest
    needs: optimize_image
    outputs:
      IMAGE_DIGEST: ${{ steps.extract_image_digest.outputs.digest }}

    steps:
      - name: Install Cosign
        run: |
          curl -L https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker Image
        run: docker pull sidwar/devsecops-demo:${{ github.sha }}

      - name: Extract Image Digest
        id: extract_image_digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' sidwar/devsecops-demo:${{ github.sha }})
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Sign Docker Image
        run: |
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key
          cosign sign --key cosign.key --yes $IMAGE_DIGEST
        env:
          IMAGE_DIGEST: ${{ steps.extract_image_digest.outputs.digest }}

      - name: Cleanup
        run: rm -f cosign.key

  verify_image:
    runs-on: ubuntu-latest
    needs: sign_image

    steps:
      - name: Install Cosign
        run: |
          curl -L https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/

      - name: Print Image Digest
        run: echo "IMAGE_DIGEST: ${{ needs.sign_image.outputs.IMAGE_DIGEST }}"

      - name: Print COSIGN_PUBLIC_KEY
        run: echo "COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}"

      - name: Verify Signed Docker Image using Digest
        run: |
          echo "${{ secrets.COSIGN_PUBLIC_KEY }}" > cosign.pub
          cosign verify --key cosign.pub ${{ needs.sign_image.outputs.IMAGE_DIGEST }}
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
